import request = require('request');
import http = require('http');

let defaultBasePath: string = "{{basePath}}";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */

{{#models}}
{{#model}}

export class {{className}} {{#parent}}extends {{{parent.className}}} {{/parent}}{
{{#params}}
    {{name}}: {{#isEnum}}{{className}}.{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{#array}}Array<{{/array}}{{{dataType.className}}}{{#array}}>{{/array}}{{/isEnum}};
{{/params}}
}

{{#hasEnums}}
export namespace {{classname}} {
{{#vars}}
{{#isEnum}}
    export enum {{datatypeWithEnum}} { {{#allowableValues}}{{#values}}
        {{datatypeWithEnum}}_{{.}} = <any> '{{.}}'{{^-last}},{{/-last}}{{/values}}{{/allowableValues}}
    }
{{/isEnum}}
{{/vars}}
}
{{/hasEnums}}
{{/model}}
{{/models}}


{{#apis}}

export interface {{name}} {
	{{#methods}}
			{{name}}(accessToken: string{{#params}}, {{name}}: {{#array}}Array<{{/array}}{{dataType.className}}{{#array}}>{{/array}}{{/params}}) :
			  Promise<{ response: http.IncomingMessage; {{#hasReturnType}}body: {{#returnType.array}}Array<{{/returnType.array}}{{{returnType.className}}}{{#returnType.array}}>{{/returnType.array}}; {{/hasReturnType}}{{^hasReturnType}}body?: any; {{/hasReturnType}} }>;
	{{/methods}}
}

{{#description}}
/**
* {{&description}}
*/
{{/description}}
export class {{name}}Impl implements {{name}} {
    protected basePath : string;
    protected defaultHeaders : any = {};
    protected servicePath : string = '{{path}}';

	  constructor() {
	    this.basePath = defaultBasePath + this.servicePath;
	  }

    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }

{{#methods}}
    /**
     *
     {{#params}}* @param {{name}}
     {{/params}}*/
    public {{name}}(accessToken: string{{#params}}, {{name}}: {{#array}}Array<{{/array}}{{dataType.className}}{{#array}}>{{/array}}{{/params}}) :
		    Promise<{ response: http.IncomingMessage; {{#hasReturnType}}body: {{#returnType.array}}Array<{{/returnType.array}}{{{returnType.className}}}{{#returnType.array}}>{{/returnType.array}}; {{/hasReturnType}}{{^hasReturnType}}body?: any; {{/hasReturnType}} }> {
        const localVarPath = this.basePath + `{{path}}`;

        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};

{{#queryParams}}
        if ({{name}} !== undefined) {
            queryParameters['{{name}}'] = {{name}};
        }

{{/queryParams}}

        let useFormData = false;

{{#formParams}}
        if ({{name}} !== undefined) {
            formParams['{{name}}'] = {{name}};
        }
{{#isFile}}
        useFormData = true;
{{/isFile}}

{{/formParams}}
        let requestOptions: request.Options = {
            method: '{{httpMethod}}',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
{{#bodyParams}}
            body: {{name}},
{{/bodyParams}}
        };

        if (accessToken !== undefined) {
          requestOptions.headers["Authorization"] = "Bearer " + accessToken;
        }

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; {{#hasReturnType}}body: {{#returnType.array}}Array<{{/returnType.array}}{{{returnType.className}}}{{#returnType.array}}>{{/returnType.array}}; {{/hasReturnType}}{{^hasReturnType}}body?: any; {{/hasReturnType}} }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
{{/methods}}
}
{{/apis}}
